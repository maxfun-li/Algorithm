青蛙王子只在一条直线上跳跃，其开始位置在原点0上，可向前或者向后跳，但只能以两种指定的长度(length1, length2)进行跳跃。判断青蛙在两种指定的跳跃长度下能否跳到指定的目标地点(destination)，并给出使跳数最小的跳跃方法。
青蛙王子跳问题抽象为：对任意给定一个整数destination和两个正整数length1，length2，是否存在两个整数X, Y使得destination = X * length1 + Y * length2. 并给出使等式成立且|X| + |Y|最小的X, Y (若等式可成立，则X与Y的解由无数个).
算法思路：
	1. 不妨设length1 > length2 > length3 > length4 > length5 > length6 > length7> length8 >・・・・・・ ,
	 如下图所示，则有length1 = length2 + length3，length2 = length3 + length4，length3 = length4 + length5, ・・・・・・，按照如此，将长度不等的两段依次分割下去，最终会得到相等的两段，即length(N-2) = length(N-1) + length(N), 且length(N)=length(N-1)=minStep，则length(N-2) = 2 * minStep，length(N-3) = length(N-2) + length(N-1) = 3 * minStep，依此类推，length1和length2皆可有minStep表示，即length1 = k1 * minStep, length2 = k2 * minStep; 
	此外minStep = length(N) = length(N-2) - length(N-1)=(length(N-4) - length(N-3)) - (length(N-3) - length(N-2) = ・・・・・・=k3 * length1 + k4 * length2;
	所以一方面destination = X * length1 + Y * length2 = k1 * X *minStep + k2 * Y * minStep = (k1 * X + k2 * Y) * minStep. 所以等式要成立，则destination一定要能被minStep整除，记整除后商为k5，即 k5 =  (k1 * X + k2 * Y) .
	另一方面minStep = k3 * length1 + k4 * length2. destination = k5 * minStep = k5 *  (k3 * length1 + k4 * length2).
	即destination能被minStep整除就一定能被length1和length2表示.
	由此，先分割长度求出minStep以及k3和k4，再判断destination能否被minStep整除，能则存在解X = k3 * k5, Y = k5 * k4; 不能，则无解.
	|----------------------------------------------------length1----------------------------------------------------------------------|
	|----------------------length2------------------------------------------------||------------------length3-------------------------|
	|----------------------length3---------------------||---------length4---------|
	|---------length4-----------||-----length5---------|
	|-----length5--------|--l6--|
                            .                                                                                                                   .
                            .                                                                                                                   .
                            .                                                                                                                   .
	2. 化解系数X, Y：
	设length1与length2的最大公约数为k6, 即mlength1 = length1 / k6; mlength2 = length2 / k6;  则对于方程k7 * length1 = k8 * length2 > 0, k8 = mlength1, k7 = mlength2是其的解，且此时成绩k7 * length1最小.
	由minStep = length(N) = length(N-2) - length(N-1)=(length(N-4) - length(N-3)) - (length(N-3) - length(N-2) = ・・・・・・=k3 * length1 + k4 * length2可知，k3、k4必为一正一负，故此时的X = k3 * k5, Y = k5 * k4，必为一正一负.
	按照一定的方式同时减小正系数，增大负系数，可做到destination = X * length1 + Y * length2. 且系数的绝对值和在减小.
	destination = X * length1 + Y * length2  = (X + mlength2) * length1 + (Y - mlength1) *length2 = (X - mlength2) * length1 + (Y + mlength1) *length2.
	由于mlength1、mlength2是length1、length2约去最大公约数后的值，(X, Y)与(X + mlength2, Y - mlength1)之间以及(X, Y)与(X - mlength2, Y + mlength1)之间不存在任何整数使得目标等式相等.
	所以：
	若X > 0，Y < 0, 则让X以mlength2依次减小，Y以mlength1依次增大，此时|X|+|Y|应向最小的方向变化，终止条件为|X|+|Y|不再减小.
	若X < 0，Y > 0, 则让X以mlength2依次增大，Y以mlength1依次减小，此时|X|+|Y|应向最小的方向变化，终止条件为|X|+|Y|不再减小.


青蛙王子跳问题扩展：
青蛙王子跳问题抽象为：对任意给定一个整数destination和两个正整数length1，length2，是否存在两个整数X, Y使得destination = X * length1 + Y * length2. 并给出使等式成立且|X| + |Y|最小的X, Y (若等式可成立，则X与Y的解由无数个).
其要求length1， length2为正整数. 若将其扩展到整数范围，即：对任意给定一个整数A, B, C, 是否存在两个整数X, Y使得C = X * A + Y * B. 并给出使等式成立且|X| + |Y|最小的X, Y (若等式可成立，则X与Y的解由无数个).
算法思路：
参数A、B的符号可以分别转嫁到系数X、Y外. 所以先以绝对值数|A|和|B|参加求解运算C = X * |A| + Y * |B|求解，此时X = X * (A>0? 1: -1), Y = Y * (B>0? 1: -1), 即X、Y分别包含了A，B的符号。求解所得的系数X可以看作X * (-1) *(-1), Y * (-1) * (-1). 若A<0，则取走一个(-1), X = -X；否则 X = X. 若B<0，则取走一个(-1), Y = -Y；否则Y = Y.

